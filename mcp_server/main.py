# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:29:38+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import Error, TravelCenter, TravelCenterList

app = MCPProxy(
    contact={
        'email': 'Joachim.Schirrmacher@deutschebahn.com',
        'name': 'DB Systel GmbH',
    },
    description='This REST-API enables you to query information about travel centers in Germany.',
    termsOfService='https://developer.deutschebahn.com/store/',
    title='Reisezentren-API',
    version='v1',
    servers=[
        {'url': 'https://api.deutschebahn.com/reisezentren/v1'},
        {'url': 'http://api.deutschebahn.com/reisezentren/v1'},
    ],
)


@app.get(
    '/reisezentren',
    description=""" Get all station infos """,
    tags=['station_information_retrieval'],
)
def get_reisezentren(name: Optional[str] = None):
    """
    Get all station infos
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reisezentren/loc/{lat}/{lon}',
    description=""" Get information about a station near a location """,
    tags=['station_information_retrieval'],
)
def get_reisezentren_loc__lat__lon(lat: float, lon: float = ...):
    """
    Get information about a station near a location
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reisezentren/loc/{lat}/{lon}/{dist}',
    description=""" Get stations in a given radius """,
    tags=['station_information_retrieval'],
)
def get_reisezentren_loc__lat__lon__dist(
    lat: float, lon: float = ..., dist: float = ...
):
    """
    Get stations in a given radius
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reisezentren/{id}',
    description=""" Get information about a specific station """,
    tags=['station_information_retrieval'],
)
def get_reisezentren__id(id: str):
    """
    Get information about a specific station
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
